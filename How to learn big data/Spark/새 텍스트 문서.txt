sc.parallelize(List(dfknd))라고 명시하고 시작
LIST 를 RDD로 변경해 줄때 사용 해야 한다 모든 타입을 RDD로 

Cartesian 각 자리마다 추가 시켜 준다. 
countByValue 각 자리를 하나씩 세어줌 그러나 Map형태가 되어 버림 
var nk = sk.countByValue() ->  Map(5 -> 1, 1 -> 1, 6 -> 1, 2 -> 3, 3 -> 2, 4 -> 2)
nk.foreach(println(_))
(5,1)
(1,1)
(6,1)
(2,3)
(3,2)
(4,2)
nk.collectAsmap()
 var ab  = sc.parallelize(List(1,2,3,4,3,2,1,2,3))
println(ab.collect().mkString(" ")) -> 1 2 3 4 3 2 1 2 3
println(ab.collect().mkString(",")) -> 1,2,3,4,3,2,1,2,3

var result = input.aggregate((0,0))((acc,value) => (acc._1 +value, acc._2 +1) , (acc1,acc2) => (acc1._1 + acc2._1, acc1._2 + acc2._2))

var a = (1,3,4,2,)
a._1  = 1

var test1 = test.map(x => x.split(","))
-> Array[Array[String]] = Array(Array(a, 1), Array(b, 1), Array(c, 1), Array(c, 1), Array(d, 1), Array(d, 1), Array(e, 1), Array(a, 1), Array(b, 2), Array(c, 1))

var test2 = test1.map( x => (x(0), x(1))
-> Array[(String, String)] = Array((a,1), (b,1), (c,1), (c,1), (d,1), (d,1), (e,1), (a,1), (b,2), (c,1))


aggregate((0,0))(seqOp, comOp)
seqOp : (x,y) => (x._1 + y, x._2 +1)
combOp: (x,y) => (x._1 + y._2, x._2 + y._2)
Partition #1
[1,2]
0 + 1 =1 , 0 + 1 = 1
1 + 2 = 3, 1+1 =2 
(3,2) -> sum , length

Partition #2
[3,4]
0 + 3 = 3 ,0 + 1 = 1
3 + 4 = 7, 1 + 1 = 2
(7,2) -> sum, length 

=> (10, 4)

처리를 두가지 구문으로 나누고 합쳐 준다. 
